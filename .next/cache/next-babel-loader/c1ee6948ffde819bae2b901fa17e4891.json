{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport App from 'next/app';\nimport { Provider } from 'react-redux';\nimport 'antd/dist/antd.css';\nimport Router from 'next/router';\nimport Layout from '../components/layout/layout.js';\nimport PageLoadding from '../components/PageLoadding.jsx';\nimport WithReduxHoc from '../lib/witht-redux.js';\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loadding: false\n    });\n  }\n\n  static async getInitialProps(ctx) {\n    const {\n      Component\n    } = ctx;\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  startLoadding() {\n    this.setState({\n      loadding: true\n    });\n  }\n\n  stopLoadding() {\n    this.setState({\n      loadding: true\n    });\n  } // TODO: 组件加载\n\n\n  componentDidMount() {\n    Router.events.on('routerChangeStart');\n    Router.events.on('routerChangeComplete');\n    Router.events.on('routerChangeError');\n  } // TODO: 组件卸载前\n\n\n  componentWillUnmount() {}\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      reduxStore\n    } = this.props;\n    return __jsx(Provider, {\n      store: reduxStore\n    }, __jsx(PageLoadding, null), __jsx(Layout, null, __jsx(Component, pageProps)));\n  }\n\n}\n\nexport default WithReduxHoc(MyApp);","map":{"version":3,"sources":["/Users/zongliming/Desktop/Imitation-github/pages/_app.js"],"names":["App","Provider","Router","Layout","PageLoadding","WithReduxHoc","MyApp","loadding","getInitialProps","ctx","Component","pageProps","startLoadding","setState","stopLoadding","componentDidMount","events","on","componentWillUnmount","render","reduxStore","props"],"mappings":";;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAO,oBAAP;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;AAGA,MAAMC,KAAN,SAAoBN,GAApB,CAAwB;AAAA;AAAA;;AAAA,mCACZ;AACJO,MAAAA,QAAQ,EAAE;AADN,KADY;AAAA;;AAKpB,eAAaC,eAAb,CAA6BC,GAA7B,EAAkC;AAC9B,UAAM;AAAEC,MAAAA;AAAF,QAAgBD,GAAtB;AACA,QAAIE,SAAS,GAAG,EAAhB;;AACA,QAAID,SAAS,CAACF,eAAd,EAA+B;AAC3BG,MAAAA,SAAS,GAAG,MAAMD,SAAS,CAACF,eAAV,CAA0BC,GAA1B,CAAlB;AACH;;AACD,WAAO;AACHE,MAAAA;AADG,KAAP;AAGH;;AAEDC,EAAAA,aAAa,GAAG;AACZ,SAAKC,QAAL,CAAc;AACVN,MAAAA,QAAQ,EAAE;AADA,KAAd;AAGH;;AAEDO,EAAAA,YAAY,GAAG;AACX,SAAKD,QAAL,CAAc;AACVN,MAAAA,QAAQ,EAAE;AADA,KAAd;AAGH,GA1BmB,CA4BpB;;;AACAQ,EAAAA,iBAAiB,GAAG;AAChBb,IAAAA,MAAM,CAACc,MAAP,CAAcC,EAAd,CAAiB,mBAAjB;AACAf,IAAAA,MAAM,CAACc,MAAP,CAAcC,EAAd,CAAiB,sBAAjB;AACAf,IAAAA,MAAM,CAACc,MAAP,CAAcC,EAAd,CAAiB,mBAAjB;AACH,GAjCmB,CAmCpB;;;AACAC,EAAAA,oBAAoB,GAAG,CAEtB;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAET,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBS,MAAAA;AAAxB,QAAuC,KAAKC,KAAlD;AACA,WAAQ,MAAC,QAAD;AAAU,MAAA,KAAK,EAAED;AAAjB,OACJ,MAAC,YAAD,OADI,EAEJ,MAAC,MAAD,QACI,MAAC,SAAD,EAAeT,SAAf,CADJ,CAFI,CAAR;AAMH;;AAhDmB;;AAmDxB,eAAeN,YAAY,CAACC,KAAD,CAA3B","sourcesContent":["import App from 'next/app';\nimport { Provider } from 'react-redux';\nimport 'antd/dist/antd.css';\nimport Router from 'next/router';\nimport Layout from '../components/layout/layout.js';\nimport PageLoadding from '../components/PageLoadding.jsx';\nimport WithReduxHoc from '../lib/witht-redux.js';\n\n\nclass MyApp extends App {\n    state = {\n        loadding: false\n    };\n\n    static async getInitialProps(ctx) {\n        const { Component } = ctx;\n        let pageProps = {};\n        if (Component.getInitialProps) {\n            pageProps = await Component.getInitialProps(ctx);\n        }\n        return {\n            pageProps\n        }\n    }\n\n    startLoadding() {\n        this.setState({\n            loadding: true\n        });\n    }\n\n    stopLoadding() {\n        this.setState({\n            loadding: true\n        });\n    }\n\n    // TODO: 组件加载\n    componentDidMount() {\n        Router.events.on('routerChangeStart', );\n        Router.events.on('routerChangeComplete', ); \n        Router.events.on('routerChangeError', );\n    }\n\n    // TODO: 组件卸载前\n    componentWillUnmount() {\n\n    }\n\n    render() {\n        const { Component, pageProps, reduxStore } = this.props;\n        return (<Provider store={reduxStore}>\n            <PageLoadding />\n            <Layout>\n                <Component {...pageProps} />\n            </Layout>\n        </Provider>);\n    }\n}\n\nexport default WithReduxHoc(MyApp); "]},"metadata":{},"sourceType":"module"}