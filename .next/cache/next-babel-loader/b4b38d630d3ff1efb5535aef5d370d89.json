{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport axios from 'axios'; // TODO: 定义inntstate\n\nvar userState = {};\nvar LOGOUT = \"LOGOUT\"; // TODO: 定义reducer\n\nvar MIN = \"name\";\n\nfunction usertReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : userState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOGOUT:\n      return {};\n\n    default:\n      return state;\n  }\n} // TODO: redux-thunk 测试\n\n\nfunction asyncThunk(num) {\n  return function (dispatch, getState) {\n    setTimeout(function () {// dispatch()\n    }, 1000);\n  };\n} // TODO: action creators \n\n\nexport function logout() {\n  return function (dispatch) {\n    axios.post('/logout').then(function (resp) {\n      if (resp.status === 200) {\n        dispatch({\n          type: LOGOUT\n        });\n      } else {\n        console.log(\"\\u767B\\u51FA\\u5931\\u8D25:\".concat(resp));\n      }\n    })[\"catch\"](function (error) {\n      console.log(error);\n    });\n  };\n}\nvar allReducer = combineReducers({\n  userInfo: usertReducer\n});\nexport default function initializeStore(state) {\n  var store = createStore(allReducer, Object.assign({}, {\n    userInfo: {\n      name: 'killo'\n    }\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":{"version":3,"sources":["/Users/zongliming/Desktop/Imitation-github/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","axios","userState","LOGOUT","MIN","usertReducer","state","action","type","asyncThunk","num","dispatch","getState","setTimeout","logout","post","then","resp","status","console","log","error","allReducer","userInfo","initializeStore","store","Object","assign","name"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;;AACA,IAAIC,SAAS,GAAG,EAAhB;AAEA,IAAMC,MAAM,GAAG,QAAf,C,CAEA;;AAEA,IAAMC,GAAG,GAAG,MAAZ;;AACA,SAASC,YAAT,GAAiD;AAAA,MAA3BC,KAA2B,uEAAnBJ,SAAmB;AAAA,MAARK,MAAQ;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,MAAL;AACI,aAAO,EAAP;;AACJ;AACI,aAAOG,KAAP;AAJR;AAMH,C,CAED;;;AACA,SAASG,UAAT,CAAoBC,GAApB,EAAyB;AACrB,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC3BC,IAAAA,UAAU,CAAC,YAAM,CACb;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAJD;AAKH,C,CAED;;;AACA,OAAO,SAASC,MAAT,GAAkB;AACrB,SAAO,UAACH,QAAD,EAAc;AACjBV,IAAAA,KAAK,CAACc,IAAN,CAAW,SAAX,EAAsBC,IAAtB,CAA2B,UAACC,IAAD,EAAU;AACjC,UAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrBP,QAAAA,QAAQ,CAAC;AACLH,UAAAA,IAAI,EAAEL;AADD,SAAD,CAAR;AAGH,OAJD,MAIO;AACHgB,QAAAA,OAAO,CAACC,GAAR,oCAAoBH,IAApB;AACH;AACJ,KARD,WAQS,UAACI,KAAD,EAAW;AAChBF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH,KAVD;AAWH,GAZD;AAaH;AAED,IAAMC,UAAU,GAAGzB,eAAe,CAAC;AAAE0B,EAAAA,QAAQ,EAAElB;AAAZ,CAAD,CAAlC;AAEA,eAAe,SAASmB,eAAT,CAAyBlB,KAAzB,EAAgC;AAC3C,MAAMmB,KAAK,GAAG7B,WAAW,CAAC0B,UAAD,EAAaI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEJ,IAAAA,QAAQ,EAAE;AAAEK,MAAAA,IAAI,EAAE;AAAR;AAAZ,GAAlB,EAAmDtB,KAAnD,CAAb,EAAwEN,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CAA3F,CAAzB;AACA,SAAO0B,KAAP;AACH","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport axios from 'axios';\n\n\n// TODO: 定义inntstate\nlet userState = {};\n\nconst LOGOUT = \"LOGOUT\";\n\n// TODO: 定义reducer\n\nconst MIN = \"name\";\nfunction usertReducer(state = userState, action) {\n    switch (action.type) {\n        case LOGOUT:\n            return {}\n        default:\n            return state;\n    }\n}\n\n// TODO: redux-thunk 测试\nfunction asyncThunk(num) {\n    return (dispatch, getState) => {\n        setTimeout(() => {\n            // dispatch()\n        }, 1000)\n    }\n}\n\n// TODO: action creators \nexport function logout() {\n    return (dispatch) => {\n        axios.post('/logout').then((resp) => {\n            if (resp.status === 200) {\n                dispatch({\n                    type: LOGOUT\n                })\n            } else {\n                console.log(`登出失败:${resp}`);\n            }\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n}\n\nconst allReducer = combineReducers({ userInfo: usertReducer });\n\nexport default function initializeStore(state) {\n    const store = createStore(allReducer, Object.assign({}, { userInfo: { name: 'killo' } }, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n    return store;\n}\n\n\n"]},"metadata":{},"sourceType":"module"}