{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // TODO: 定义inntstate\n\nlet userState = {}; // TODO: 定义reducer\n\nconst MIN = \"name\";\n\nfunction usertReducer(state = userState, action) {\n  switch (action.type) {\n    case MIN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        name: action.name\n      });\n\n    default:\n      return state;\n  }\n} // TODO: redux-thunk 测试\n\n\nfunction asyncThunk(num) {\n  return (dispatch, getState) => {\n    setTimeout(() => {// dispatch()\n    }, 1000);\n  };\n}\n\nconst allReducer = combineReducers({\n  userInfo: usertReducer\n});\nexport default function initializeStore(state) {\n  const store = createStore(allReducer, Object.assign({}, {\n    userInfo: {\n      name: 'killo'\n    }\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":{"version":3,"sources":["/Users/zongliming/Desktop/Imitation-github/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","userState","MIN","usertReducer","state","action","type","name","asyncThunk","num","dispatch","getState","setTimeout","allReducer","userInfo","initializeStore","store","Object","assign"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAGA;;AACA,IAAIC,SAAS,GAAG,EAAhB,C,CAEA;;AAEA,MAAMC,GAAG,GAAG,MAAZ;;AACA,SAASC,YAAT,CAAsBC,KAAK,GAAGH,SAA9B,EAAyCI,MAAzC,EAAiD;AACzC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,GAAL;AACI,6CACOE,KADP;AAEIG,QAAAA,IAAI,EAAEF,MAAM,CAACE;AAFjB;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASP,C,CAED;;;AACA,SAASI,UAAT,CAAoBC,GAApB,EAAyB;AACrB,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3BC,IAAAA,UAAU,CAAC,MAAM,CACb;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAJD;AAKH;;AACD,MAAMC,UAAU,GAAGhB,eAAe,CAAC;AAAEiB,EAAAA,QAAQ,EAAEX;AAAZ,CAAD,CAAlC;AAEA,eAAe,SAASY,eAAT,CAAyBX,KAAzB,EAAgC;AAC3C,QAAMY,KAAK,GAAGpB,WAAW,CAACiB,UAAD,EAAaI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEJ,IAAAA,QAAQ,EAAE;AAACP,MAAAA,IAAI,EAAE;AAAP;AAAZ,GAAlB,EAAgDH,KAAhD,CAAb,EAAqEJ,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CAAxF,CAAzB;AACA,SAAOiB,KAAP;AACH","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\n// TODO: 定义inntstate\nlet userState = {};\n\n// TODO: 定义reducer\n\nconst MIN = \"name\";\nfunction usertReducer(state = userState, action) {\n        switch (action.type) {\n            case MIN:\n                return {\n                    ...state,\n                    name: action.name\n                }\n            default:\n                return state;\n        }\n}\n\n// TODO: redux-thunk 测试\nfunction asyncThunk(num) {\n    return (dispatch, getState) => {\n        setTimeout(() => {\n            // dispatch()\n        }, 1000)\n    }\n}\nconst allReducer = combineReducers({ userInfo: usertReducer });\n\nexport default function initializeStore(state) {\n    const store = createStore(allReducer, Object.assign({}, { userInfo: {name: 'killo'}}, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n    return store;\n}\n\n\n"]},"metadata":{},"sourceType":"module"}